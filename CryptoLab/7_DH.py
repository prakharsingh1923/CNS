def prime(n):
    for i in range(2, n//2):
        if n%i != 0:
            return True
def User(X,F,q):
    YA = F**X % q
    return YA
def UserABKey(YB,XA,q):
    Key =  YB**XA % q
    return Key
def DH_algo(q,F,XA,XB):
    if (not prime(q))or XA>q or XB>q:
        return print(f'q is not prime or Public key is greater than prime no.')
    else:
        YA = User(XA,F,q)
        YB = User(XB,F,q)
        keyA = UserABKey(YB,XA,q)
        keyB = UserABKey(YB,XB,q)
        key = (F**(XA*XB))%q
        print(f'private key of UserA: {XA}')
        print(f'private key of UserB: {XB}')
        print(f'key generated by UserA(YA): {YA}')
        print(f'key generated by UserB(YB): {YB}')
        print(f'Secret Key of UserA: {keyA}')
        print(f'Secret Key of UserB: {keyB}')
        print(f'Secret Key: {key}')
DH_algo(q = 23, F = 7, XA = 3, XB = 6)